#+TITLE: Emacs Config
#+AUTHOR: marvhus
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://ugeek.github.io/style-css-org-mode/bjm_code.css" />

* Introduction
This is my emacs config...
but explained through org mode

- *Author*:   marvhus
- *Created*:  18-03-2023
- *Licence*:  [[https://www.gnu.org/licenses/gpl-3.0.txt][GNU General Public Licence Version 3 (GPLv3)]]

* Dependencies
- lsp-mpde
- ivy
- drag-stuff
- multiple-cursors
- undo-fu
- company
- smex
- exec-path-from-shell-initialize
- magit (not in config but I use it) 

* The Config
** Initialize melpa
#+BEGIN_SRC emacs-lisp :exports code
(require 'package)
(add-to-list 'package-archives
			 '("melpa" . "https://melpa.org/packages/"))
#+END_SRC

** Initiallize/Install use-package
#+BEGIN_SRC emacs-lisp :exports code
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

** Setup line numbers
#+BEGIN_SRC emacs-lisp :exports code
(setq-default display-line-numbers 'relative
			  display-line-numbers-current-absolute t)
#+END_SRC

** Set Font
#+BEGIN_SRC emacs-lisp :exports code
(set-face-attribute 'default nil :font "Hack 14")
#+END_SRC

** Hide Tool Bar
#+BEGIN_SRC emacs-lisp :exports code
(tool-bar-mode -1)
#+END_SRC

** Org Bullets
#+BEGIN_SRC emacs-lisp :exports code
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** Setup lsp stuff
#+BEGIN_SRC emacs-lisp :exports code
(setq lsp-keymap-prefix "C-c l")
(require 'lsp-mode)
(add-hook 'prog-mode-hook #'lsp)
#+END_SRC

** Setup company
#+BEGIN_SRC emacs-lisp :exports code
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

** Setup ivy
#+BEGIN_SRC emacs-lisp :exports code
(ivy-mode 1)
#+END_SRC

** Setup drag stuff
#+BEGIN_SRC emacs-lisp :exports code
(require 'drag-stuff)
(drag-stuff-mode t)
(drag-stuff-global-mode 1)
(drag-stuff-define-keys)
#+END_SRC

** Scrolling and tab width
#+BEGIN_SRC emacs-lisp :exports code
(setq-default tab-width 4)
(setq scroll-margin 20)
(setq scroll-conservatively 101)
#+END_SRC

** Misc Settings
#+BEGIN_SRC emacs-lisp :exports code
(setq org-image-actual-width nil)
(setq calendar-week-start-day 1)
(setq column-number-mode t)
(setq scroll-bar-mode 0)
#+END_SRC

** Disable various files I don't want (~, .#, #)
#+BEGIN_SRC emacs-lisp :exports code
(setq make-backup-files nil)
(setq create-lockfiles nil) 
(setq make-backup-files nil)
#+END_SRC

** Set C tab offset
#+BEGIN_SRC emacs-lisp :exports code
(setq-default c-basic-offset 4)
#+END_SRC

** Make emacs split vertically if no direction is specified
#+BEGIN_SRC emacs-lisp :exports code
(setq split-width-threshold nil)
#+END_SRC

** Make emacs know what we have in path
#+BEGIN_SRC emacs-lisp :exports code
(exec-path-from-shell-initialize)
#+END_SRC

** Theme
Slightly changed/fixed version of Jonathan Blow's emacs theme
#+BEGIN_SRC emacs-lisp :exports code
(custom-set-faces
 '(default ((t (:foreground "#D3B58D" :background "#041818"))))
 '(custom-group-tag-face ((t (:underline t :foreground "lightblue"))) t)
 '(custom-variable-tag-face ((t (:underline t :foreground "lightblue"))) t)
 '(font-lock-builtin-face ((t nil)))
 '(font-lock-comment-face ((t (:foreground "#3FDF1F"))))
 '(font-lock-function-name-face ((((class color) (background dark)) (:foreground "white"))))
 '(font-lock-keyword-face ((t (:foreground "white"))))
 '(font-lock-string-face ((t (:foreground "#0FDFAF"))))
 '(font-lock-variable-name-face ((((class color) (background dark)) (:foreground "#C8D4EC"))))
 '(font-lock-warning-face ((t (:foreground "#504038"))))
 '(highlight ((t (:foreground "navyblue" :background "darkseagreen2"))))
 '(mode-line ((t (:inverse-video t))))
 '(region ((t (:background "blue"))))
 '(widget-field-face ((t (:foreground "white"))) t)
 '(widget-single-line-field-face ((t (:background "darkgray"))) t))

(global-font-lock-mode 1)
(set-cursor-color "lightgreen")
(set-background-color "#072626")
(global-set-key [C-return] 'save-buffer)

(set-face-foreground 'font-lock-builtin-face         "lightgreen")
#+END_SRC

** Custom Keybinds
#+BEGIN_SRC emacs-lisp :exports code
(global-set-key (kbd "<C-return>") 'save-buffer)

(global-set-key (kbd "C-c r") 'recompile)
(global-set-key (kbd "C-c c") 'compile)

(global-set-key (kbd "C-c v") 'split-window-right)
(global-set-key (kbd "C-c s") 'split-window-below)
(global-set-key (kbd "C-c q") 'delete-window)

(global-set-key (kbd "<C-up>")		'shrink-window)
(global-set-key (kbd "<C-down>")	'enlarge-window)
(global-set-key (kbd "<C-left>")	'shrink-window-horizontally)
(global-set-key (kbd "<C-right>")	'enlarge-window-horizontally)

(global-set-key (kbd "C-S-<up>")	'windmove-up)
(global-set-key (kbd "C-S-<down>")	'windmove-down)
(global-set-key (kbd "C-S-<left>")	'windmove-left)
(global-set-key (kbd "C-S-<right>") 'windmove-right)

(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "C-c C-c x") 'execute-extended-command)

(global-set-key (kbd "C-c C-u") 'undo-fu-only-undo)
(global-set-key (kbd "C-c C-y") 'undo-fu-only-redo)

;; Do What I mean
(global-set-key (kbd "C-M-j") 'mc/mark-all-dwim)

;; Edit lines
(global-set-key (kbd "C-M-c") 'mc/edit-lines)

;; Mark
(global-set-key (kbd "C-M-,") 'mc/mark-previous-like-this) 
(global-set-key (kbd "C-M-.") 'mc/mark-next-like-this) 

;; Unmark
(global-set-key (kbd "C-M-n") 'mc/unmark-previous-like-this) 
(global-set-key (kbd "C-M-m") 'mc/unmark-next-like-this) 

;;; Skip
(global-set-key (kbd "C-M-<") 'mc/skip-to-previous-like-this)
(global-set-key (kbd "C-M->") 'mc/skip-to-next-like-this)
#+END_SRC
